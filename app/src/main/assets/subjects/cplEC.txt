Unit - I: Tutorials and Practice Exercises

<b>1. Introduction</b>
<br>Definition, need, and types of programming languages and their selection criterion. 
<br>•	Need for programming language
<br>•	Computer programming languages: Machine language, assembly/low-level language, middle-level language and high-level languages. Features and advantages and disadvantages.
<br>•	Algorithm and methods of writing algorithms: pseudo-code and flow-charts
<br>•	Features of pseudo-code or flow-charts
<br>•	Programming paradigms: Features of procedure oriented programming (POP) and object oriented programming (OOP) paradigms  
<br>•	Program development process (writing, editing, compilation, linking, execution and debugging and file extensions) and tools 
<br>•	Programming errors: Syntax, semantic, linker, and run-time (logical and data) errors
<br>•	C-program format
<br>•	Introduction to standard input and output statements 
<br>•	Variables and constants: Definition, naming (identifiers or labels for different entities), initialization and accessing of variables. Constants and their representation
<br>•	Data types: classification, memory requirement, range of values, usage and type specifiers 
<br>•	Operators and Operands: Unary, binary and ternary operators. Arithmetic, logical, relational, combinational-assignment and special operators. Precedence and associativity.  Unary and binary operands
<br>•	Statements- tokens and expressions 
<br>•	Type casting-automatic and forced 
<br>•	Escape characters
<br>•	I/O statements in detail
<br><br><b>2. Control structure</b>
<br>•	Branching: Conditional (if, if-else, nested and ladder if-else, switch constructs) and unconditional (brake, continue and goto statements)
<br>•	Looping: Entry-controlled (for and while) and exit-controlled (do while) loops
<br><br><b>3. Arrays/Matrices, strings and pointers</b>
<br>•	Definition, declaration, initialization (static and run-time or dynamic) of arrays, strings and pointers
<br>•	Accessing of strings, arrays (one and two dimensional), and pointers
<br><br><b>4. Functions</b>
<br>•	Concept, pros and cons, classification, creation and application of functions 
<br>•	Parameter passing: Pass by value and address methods 
<br>•	Library and user-defined functions
<br>•	Recursive and non-recursive functions
<br>•	Data visibility and longevity
<br><br><b>5. User-defined data-type</b>
<br>•	Definition, declaration, initialization of members and variables of structures and unions 
<br>•	Distinction between structures and unions 
<br>•	Accessing of members of structures and unions
<br><br><b>6. Macros</b>
<br>Definition, classification and application of macros in program development

<br><br><b>Practice Exercises:</b>
<br><br><b>1. Write algorithm, flow-chart and program for the following problems (Assume relevant data if necessary and right units. Search and use library functions wherever possible).</b>
<br>1.	Display your country name and beep at the end.
<br>2.	Display the following text: 
<br>     C was developed by “Dennis M Ritchie” in 1972
<br>3.	Compute the area and circumference of a circle given the radius
<br>4.	Compute simple interest given the interest rate, principal and duration
<br>5.	Compute compound interest given the interest rate, principal, compounding-nature and duration
<br>6.	Swap contents of two variables without using intermediate variables
<br>7.	Display expenditure incurred against each item, such as fee receipt  
<br>8.	Factorial of a single digit number
<br>9.	Absolute value of a number
<br>10.	Verify if the given number is prime or not
<br>11.	Largest of three numbers using if-else and ternary operators
<br>12.	Logarithm of a number.
<br>13.	sin(θ1+ θ2)+cos(θ1- θ2) given θ1 and θ2 in degrees
<br>14.	Average of N numbers read through keyboard (i.e., at run-time)
<br>15.	Average of the numbers in an N x M matrix
<br>16.	Search a number in an array of N integers
<br>17.	Verify Pythagoras theorem. 
<br>18.	Compute the area and circumference of a circle given the radius using macro for pi.
<br>19.	Find smallest of three numbers using macro
<br>20.	Use function to swap contents of two variables using (a) by pass-by-value and (b) pass-by-address methods

<br><br><b>2. Analysis of the program</b>
<br>Given the program or block of program code, analyze the same and record the output or error, as the case may be. Justify your answer. Examples,
<br>1.	#include<stdio.h>
<br>     main()
<br>       { 
<br>        int k=5, l=24; printf(“%f”, k/l);
<br>        }
<br><br>2.	#include<stdio.h>
<br>     main()
<br>       { 
<br>        printf(“Saying by Mahatma\tGhandiji: \nWhat can\’’t be tolerated must be endured’’);
<br>       }
<br><br>3.	int i;
<br>for (i=1; i<10; i--);

Unit – II: Graded Exercises 

Write the algorithm/flow-chart and code for the following problems 
<br><b>Note:</b> Assume appropriate data and units wherever necessary. Library functions, unless specified, can be used wherever necessary.

<br><br>1.	Given the resistance and standard tolerance, generate the color bands of the resistor
<br>2.	Given the total marks, generate the result-class of a student
<br>3.	Given an alphabet, display whether it is VOWEL or CONSONANT
<br>4.	Multiply two matrices using array-subscript method
<br>5.	Add two matrices using pointers
<br>6.	Given a string, reverse it using your own code and a library function; compare the time consumed in both approaches
<br>7.	Given x in radians, compute sin(x) using series method and the corresponding library function; compare both methods for execution time.
<br>8.	Create a structure to represent a book and declare an array of N variables of the type book and sum and display the cost members of all the book variables
<br>9.	Simulate the arithmetic calculator
<br>10.	Sort a list of N numbers using user defined function
<br>11.	Two open-ended experiments of similar nature and magnitude of the above are to be assigned by the teacher (Student is expected to solve and execute/simulate independently. Open-ended programs covered here shall not be included in the exam)

Unit – III: Student Activity for CIE

1.	Prepare/Collect notes pertaining to unit-1 and solve practice programs specified in unit-1
<br>2.	Collect or write any 10 programs (open-ended) not specified in unit-1 or unit-2
<br>3.	Prepare a list of high-level programming languages, collect features of any five such high-level programming languages and collect/prepare material on C-program development tools and their usage.

<br><br><b>Institutional Activity (No marks)</b>
<br>The following are suggested institutional activities, to be carried out at least one during the semester. The course teacher/coordinator is expected to maintain the relevant record (Containing, Activity name, Resource persons and their details, duration, venue, student feedback, etc) pertaining to Institutional activities

<br><br>1.	Organize hands-on practice on installation of Compilers and use of IDE for program development. 
<br>2.	Organize seminar on free-open source software
<br>3.	Conduct quiz on C programming

<b>Reference Books:</b>
<br><br>1.	C Programming By Balaguruswamy, TMH Publishers, ISBN-10: 8131716813, 2009.
<br>2.	C Programming By Kernighan and Dennis Ritchie

<b>Scheme of Valuation for SEE:</b>

<br><br>1.	Short questions on unit-1 (only write-up) : 05
<br>2.	Writing steps /Algorithm/Procedure (20% weightage) and program (80% weightage) for two questions from the graded exercises : 20
<br>3.	Execution/Implementation of either one of the programs written given in 2 : 15
<br>4.	Open-ended problem: Writing program and its execution/implementation. :	05
<br>5.	Viva-voce :	05

<br><br><b>TOTAL = 50 Marks</b>